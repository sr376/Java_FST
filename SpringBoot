
Alien.java
package com.telusko.first;

import org.springframework.stereotype.Component;

@Component
public class Alien {

    public void code() {
        System.out.println("I'm Coding..");
    }
}
.

package com.telusko.first;
Declares the package com.telusko.first, which is like a folder structure in your project.
Helps in organizing the code and avoiding name conflicts with other classes.

import org.springframework.stereotype.Component;
Imports the @Component annotation from the Spring Framework.
@Component is a Spring-managed annotation that tells Spring to automatically detect and register this class as a bean.

@Component
Marks this class as a Spring-managed bean.
When Spring scans the project, it will automatically create an instance of Alien and manage it in the Spring container.
Now, we can retrieve the Alien object using:

ApplicationContext context = SpringApplication.run(FirstprojApplication.class, args);
Alien obj = context.getBean(Alien.class);
If @Component is missing, context.getBean(Alien.class) will not work.

public class Alien {
Declares a public class named Alien.
This class can be used anywhere in the project.

public void code() {
Defines a method named code() that does not return anything (void).

System.out.println("I'm Coding..");
Prints "I'm Coding.." to the console when the code() method is executed.
üîÑ Complete Flow of Execution
Spring scans the package and finds @Component on Alien, so it registers it as a bean.
In FirstprojApplication.java, we request the Alien bean using:

Alien obj = context.getBean(Alien.class);
Spring retrieves the existing Alien object instead of creating a new one.
The method obj.code(); is called, and "I'm Coding.." is printed.



FirstApp.java
package com.telusko.first;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class FirstprojApplication {

    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.run(FirstprojApplication.class, args);

        Alien obj = context.getBean(Alien.class);
        obj.code();
    }
}


FirstApplication.java

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
These import required Spring Boot classes:

Import	Purpose
SpringApplication	Used to start the Spring Boot application.
@SpringBootApplication	Enables auto-configuration, component scanning, and Spring Boot configuration.
ApplicationContext	Manages Spring Beans (Spring container).

@SpringBootApplication
public class FirstprojApplication {
Defines the main class FirstprojApplication, which will start the application.
@SpringBootApplication is a meta-annotation that includes:
@Configuration ‚Üí Marks this class as a configuration class.
@EnableAutoConfiguration ‚Üí Enables automatic Spring Boot configurations.
@ComponentScan ‚Üí Scans for Spring-managed components (@Component, @Service, @Repository, @Controller).

ApplicationContext context = SpringApplication.run(FirstprojApplication.class, args);
What Happens Here?
SpringApplication.run(...) starts the Spring Boot application.
It creates and initializes the Spring container (ApplicationContext), which:
Scans for all Spring components (@Component) in the project.
Creates objects (beans) for those components and manages their lifecycle.
Performs dependency injection if needed.
Returns an ApplicationContext object, which acts as the Spring container.
6Ô∏è‚É£ Getting a Spring Bean

Alien obj = context.getBean(Alien.class);
Retrieves an instance of the Alien class from the Spring container.
context.getBean(Alien.class):
Looks for a class annotated with @Component, @Service, @Repository, or @Controller.
If Alien is marked with @Component, Spring creates an object and returns it.
This avoids using new Alien(); manually, allowing Spring to manage dependencies.
7Ô∏è‚É£ Calling a Method on the Bean

obj.code();
Calls the code() method on the Alien object.
If Alien is implemented like this:

import org.springframework.stereotype.Component;

@Component
public class Alien {
    public void code() {
        System.out.println("I'm Coding...");
    }
}
Spring creates and manages an object of Alien.
The program prints:

I'm Coding...
üîÑ Complete Flow of Execution
Spring Boot Application Starts
SpringApplication.run() initializes Spring Boot and Spring Container (ApplicationContext).
Spring Scans for Components
Finds @Component classes (like Alien) and creates their objects (Beans).
Retrieves a Bean
context.getBean(Alien.class) fetches the Alien object from the Spring Container.
Calls code() Method
obj.code(); runs the method, printing "I'm Coding...".

Why Use context.getBean(Alien.class); Instead of new Alien();?
Feature	new Alien(); (Manual)	context.getBean(Alien.class); (Spring)
Dependency Injection	‚ùå Not possible	‚úÖ Injects dependencies automatically
Singleton Scope	‚ùå New object every time	‚úÖ One shared instance (Singleton by default)
Lifecycle Management	‚ùå No lifecycle management	‚úÖ Handles initialization & destruction
Testing & Mocking	‚ùå Hard to mock	‚úÖ Supports Spring mock testing

Laptop.java

package com.telsuko.first;
import org.springframework.stereotype.Component;

@Component
public class Laptop{
    public void compile(){
        System.out.println("compiling");
    }
}

Explanation : we are not creating object of the laptop it is managed by springBoot App.

Alien.java
package com.telusko.first;

import org.springframework.stereotype.Component;

@Component
public class Alien {
    @Autowired
    Laptop lap;

    public void code() {
        lap.compile();
    }
}
